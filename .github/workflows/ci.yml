name: CI

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.25'

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Quality checks
      run: |
        go mod verify
        go vet ./...
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Security scan
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Build
      run: go build -ldflags="-w -s" ./cmd/markgo

    - name: Upload coverage
      uses: codecov/codecov-action@v5
      continue-on-error: true
      with:
        file: ./coverage.out
        token: ${{ secrets.CODECOV_TOKEN }}

  build-artifacts:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    strategy:
      matrix:
        target:
          - { goos: linux, goarch: amd64 }
          - { goos: darwin, goarch: amd64 }
          - { goos: windows, goarch: amd64 }

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build binary
      env:
        GOOS: ${{ matrix.target.goos }}
        GOARCH: ${{ matrix.target.goarch }}
        CGO_ENABLED: 0
      run: |
        EXT=""
        if [ "$GOOS" = "windows" ]; then EXT=".exe"; fi
        VERSION="${{ github.ref_name || 'dev' }}"
        GIT_COMMIT="${{ github.sha }}"
        BUILD_TIME="$(date -u '+%Y-%m-%d_%H:%M:%S')"
        go build -ldflags="-w -s -X 'github.com/vnykmshr/markgo/internal/commands/serve.Version=${VERSION}' -X 'github.com/vnykmshr/markgo/internal/commands/serve.GitCommit=${GIT_COMMIT}' -X 'github.com/vnykmshr/markgo/internal/commands/serve.BuildTime=${BUILD_TIME}'" \
          -o markgo-${{ matrix.target.goos }}-${{ matrix.target.goarch }}${EXT} \
          ./cmd/markgo

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: markgo-${{ matrix.target.goos }}-${{ matrix.target.goarch }}
        path: markgo-*
        retention-days: 7

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build-artifacts
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release
      run: |
        mkdir -p release
        find artifacts -name "markgo-*" -type f -exec cp {} release/ \;

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        generate_release_notes: true