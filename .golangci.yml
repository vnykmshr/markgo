# MarkGo Engine - GolangCI-Lint Configuration
# Balanced static analysis for Go code - high quality without excessive strictness

version: 2

run:
  timeout: 5m
  issues-exit-code: 1
  tests: true
  modules-download-mode: readonly

output:
  format: colored-line-number
  print-issued-lines: true
  print-linter-name: true
  sort-results: true

linters-settings:
  errcheck:
    check-type-assertions: true
    check-blank: true

  goconst:
    min-len: 3
    min-occurrences: 3

  gocritic:
    enabled-tags:
      - diagnostic
      - performance
      - style
    disabled-checks:
      - commentedOutCode
      - whyNoLint
      - unnamedResult
      - unlambda

  gocyclo:
    min-complexity: 20

  govet:
    enable:
      - shadow
    settings:
      printf:
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

  lll:
    line-length: 140

  misspell:
    locale: US

  revive:
    rules:
      - name: exported
        severity: warning
        disabled: false
        arguments:
          - "checkPrivateReceivers"
          - "sayRepetitiveInsteadOfStutters"

  unparam:
    check-exported: false

  unused:
    check-exported: false

linters:
  disable-all: true
  enable:
    # Core linters - essential for code correctness
    - errcheck      # Check for unchecked errors
    - govet         # Go vet tool with shadow detection
    - ineffassign   # Detect ineffectual assignments
    - staticcheck   # Static analysis checks
    - unused        # Find unused variables/functions

    # Style and formatting - maintain consistency
    - revive        # Replacement for golint with better rules

    # Security - important for production code
    - gosec         # Security audit

    # Code quality - reasonable checks
    - gocyclo       # Cyclomatic complexity (relaxed to 20)
    - goconst       # Find repeated strings that could be constants
    - gocritic      # Code analysis (without experimental/opinionated)
    - misspell      # Spell checking

issues:
  exclude-dirs:
    - vendor
    - tmp
    - todos

  exclude-files:
    - ".*_test.go"

  exclude-rules:
    # Relax rules for test files
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - gosec
        - goconst
        - misspell

    # Relax rules for cmd/ packages (main packages often need flexibility)
    - path: cmd/
      linters:
        - revive
        - gosec
        - gocyclo
        - gocritic
        - errcheck
        - goconst
        - misspell

    # Allow missing comments in internal packages
    - path: internal/
      linters:
        - revive
      text: "should have comment"

    # Allow HTML template functions (common in web apps)
    - linters:
        - gosec
      text: "G203.*HTML.*auto-escape"

    # Allow some common Go patterns
    - linters:
        - gosec
      text: "G204.*subprocess.*variable"

  exclude-use-default: false
  exclude:
    # Standard Go patterns that are acceptable
    - "Error return value of .((os\\.)?std(out|err)\\..*|.*Close|.*Flush|os\\.Remove(All)?|.*printf?|os\\.(Un)?Setenv). is not checked"
    # Allow defer in loops for resource cleanup
    - "G307.*defer.*loop"

  uniq-by-line: true
  max-issues-per-linter: 0
  max-same-issues: 0
  new: false

severity:
  default-severity: error